<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>ps1</string>
		<string>psm1</string>
		<string>psd1</string>
	</array>
	<key>name</key>
	<string>PowerShell</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>type without accessor or attribute needed in statement mode, mostly for [flags()] before an `enum`.</string>
			<key>begin</key>
			<string>(?=\[)</string>
			<key>end</key>
			<string>(?=[\n;)}\]])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>if type advanced, test for attribute qualified keywords</string>
					<key>begin</key>
					<string>(?!\G)(?![\n;)}\]])</string>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#attributeStatement</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression_mode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>if not a type or attribute, try finishing in command mode</string>
					<key>begin</key>
					<string>(?![\n;)}\]])</string>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#command_mode</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#RequiresDirective</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>`;` resume's in statement mode.</string>
			<key>begin</key>
			<string>;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.statement.powershell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[\n;)}\]])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>$self may have been combined with other includes, this will insure its just $self now</string>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#statements</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>attributeStatement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?i:class)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.declaration.class.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}|(?=\S)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.end.powershell</string>
						</dict>
					</dict>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>[\p{L}_]\w*(?=[\s\[{(,;&amp;|)}:#&lt;&gt;]|`\s)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.class.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\S)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>:</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.colon.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=\S)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>(?!`)((?&gt;[\p{L}_`][\w#`+]*)(?=[&lt;&gt;.,\s])(?:\.\g&lt;1&gt;?)?)</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>#type_keywords</string>
														</dict>
														<dict>
															<key>match</key>
															<string>[^\.]+</string>
															<key>name</key>
															<string>entity.other.inherited-class.powershell</string>
														</dict>
														<dict>
															<key>match</key>
															<string>\.</string>
															<key>name</key>
															<string>punctuation.accessor.type.powershell</string>
														</dict>
													</array>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=\S)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>,</string>
													<key>beginCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>punctuation.separator.comma.powershell</string>
														</dict>
													</dict>
													<key>end</key>
													<string>(?=\S)</string>
													<key>applyEndPatternLast</key>
													<true/>
													<key>patterns</key>
													<array>
														<dict>
															<key>begin</key>
															<string>(?!`)([\p{L}_`][\w#`+]*(?:\.#*\g&lt;1&gt;?)?)</string>
															<key>beginCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>patterns</key>
																	<array>
																		<dict>
																			<key>include</key>
																			<string>#type_keywords</string>
																		</dict>
																		<dict>
																			<key>match</key>
																			<string>[^\.]+</string>
																			<key>name</key>
																			<string>entity.other.inherited-class.powershell</string>
																		</dict>
																		<dict>
																			<key>match</key>
																			<string>\.</string>
																			<key>name</key>
																			<string>punctuation.accessor.type.powershell</string>
																		</dict>
																	</array>
																</dict>
															</dict>
															<key>end</key>
															<string>(?=\S)</string>
															<key>applyEndPatternLast</key>
															<true/>
															<key>patterns</key>
															<array>
																<dict>
																	<key>include</key>
																	<string>#notCode</string>
																</dict>
															</array>
														</dict>
														<dict>
															<key>include</key>
															<string>#notCode</string>
														</dict>
													</array>
												</dict>
												<dict>
													<key>include</key>
													<string>#notCode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.braces.begin.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>contentName</key>
							<string>meta.class.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>((?i:hidden|static))(?=[\s{(,;&amp;|)}])</string>
									<key>name</key>
									<string>storage.modifier.powershell</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=[\p{L}_])</string>
									<key>end</key>
									<string>}|(?=[\S\n])</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>applyEndPatternLast</key>
									<true/>
									<key>name</key>
									<string>meta.method.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>`\n</string>
											<key>name</key>
											<string>constant.character.escape.powershell</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>\G([\p{L}_]\w*)</string>
											<key>beginCaptures</key>
											<dict>
												<key>1</key>
												<dict>
													<key>name</key>
													<string>entity.name.function.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=[\S\n])</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>(?=\()</string>
													<key>end</key>
													<string>(?=\S)</string>
													<key>applyEndPatternLast</key>
													<true/>
													<key>patterns</key>
													<array>
														<dict>
															<key>begin</key>
															<string>:</string>
															<key>beginCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.separator.colon.powershell</string>
																</dict>
															</dict>
															<key>end</key>
															<string>(?=[;{])</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>begin</key>
																	<string>(?i:base)(?=[\s{(,;&amp;|)}])</string>
																	<key>beginCaptures</key>
																	<dict>
																		<key>0</key>
																		<dict>
																			<key>name</key>
																			<string>variable.language.super.powershell</string>
																		</dict>
																	</dict>
																	<key>end</key>
																	<string>(?=[;{])</string>
																	<key>patterns</key>
																	<array>
																		<dict>
																			<key>include</key>
																			<string>#declarationParameterSet</string>
																		</dict>
																	</array>
																</dict>
															</array>
														</dict>
														<dict>
															<key>include</key>
															<string>#declarationParameterSet</string>
														</dict>
														<dict>
															<key>begin</key>
															<string>{</string>
															<key>beginCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.section.braces.begin.powershell</string>
																</dict>
															</dict>
															<key>end</key>
															<string>(?=})</string>
															<key>contentName</key>
															<string>meta.method-body.powershell</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>include</key>
																	<string>$self</string>
																</dict>
															</array>
														</dict>
														<dict>
															<key>include</key>
															<string>#notCode</string>
														</dict>
													</array>
												</dict>
												<dict>
													<key>include</key>
													<string>#notCode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#variableNoProperty</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#type</string>
								</dict>
								<dict>
									<key>comment</key>
									<string>default assignment for a property</string>
									<key>begin</key>
									<string>(?==)</string>
									<key>end</key>
									<string>(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#expression_mode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>((?i:enum))(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.declaration.enum.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}|(?=\S)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.end.powershell</string>
						</dict>
					</dict>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>([\p{L}_]\w*)(?=[\s\[{(,;&amp;|)}:#&lt;&gt;])</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.enum.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\S)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>optional user specified type, PowerShell Core &gt;= 6.2.0</string>
									<key>begin</key>
									<string>:</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.colon.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=\S)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>(?!`)((?&gt;[\p{L}_`][\w`+]*)(?=[.\s])(?:\.\g&lt;1&gt;?)?)</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>#type_Disolve</string>
														</dict>
													</array>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=\S)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#notCode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.braces.begin.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.braces.end.powershell</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>meta.enumeration-definition.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>;</string>
									<key>name</key>
									<string>punctuation.terminator.assignment.enum-member.powershell</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>([\p{L}_]\w*)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.name.variable.enum-member.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=[#;&amp;|}\n])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>=</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>keyword.operator.assignment.enum-member.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=[#;&amp;|}\n])</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>comment</key>
													<string>begin at the first token in the expression, to test for numeric and unary operators</string>
													<key>begin</key>
													<string>(?![\s#]|&lt;#|`\n)(?![\n;&amp;|)}\]])</string>
													<key>end</key>
													<string>(?=.|$)</string>
													<key>applyEndPatternLast</key>
													<true/>
													<key>patterns</key>
													<array>
														<dict>
															<key>comment</key>
															<string>allow for possibility that numeric value or unary operators match first, before resuming in expression mode</string>
															<key>begin</key>
															<string>(?!\G)(?![\n;&amp;|)}\]])</string>
															<key>end</key>
															<string>(?=[\n;)}\]])</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>include</key>
																	<string>#expression_mode</string>
																</dict>
															</array>
														</dict>
														<dict>
															<key>include</key>
															<string>#numericConstant</string>
														</dict>
														<dict>
															<key>include</key>
															<string>#operators_preUnary</string>
														</dict>
														<dict>
															<key>comment</key>
															<string>if neither numeric or a pre-unary operator, just finish in expression mode</string>
															<key>begin</key>
															<string>(?![\n;&amp;|)}\]])</string>
															<key>end</key>
															<string>(?=[\n;)}\]])</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>include</key>
																	<string>#expression_mode</string>
																</dict>
															</array>
														</dict>
													</array>
												</dict>
												<dict>
													<key>include</key>
													<string>#commentBlock</string>
												</dict>
												<dict>
													<key>comment</key>
													<string>normally provided by command mode, but thats not available here</string>
													<key>match</key>
													<string>`\n</string>
													<key>name</key>
													<string>constant.character.escape.powershell</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>`,`, `&amp;` and `|` not permitted here</string>
									<key>match</key>
									<string>[,&amp;|]</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#attributeStatement</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:function|filter|workflow)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.declaration.$0.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}|(?=\S)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.end.powershell</string>
						</dict>
					</dict>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?:(global|local|script|private)(`)?(:)(?=[^\s{(,;&amp;)}])|(?=[^`'"\x{2018}-\x{201E}\s{(,;&amp;)}&lt;&gt;$@#]|`(?!\s)))</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.modifier.scope.powershell</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>invalid.character.escape.powershell</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.colon.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\S)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G</string>
									<key>end</key>
									<string>(?=[\s{(,;&amp;)}])|\G]</string>
									<key>name</key>
									<string>entity.name.function.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>comment</key>
											<string>function names that start with `:` are treated differently</string>
											<key>match</key>
											<string>\G(?&lt;!:):\p{L}\w*[^\s{(,;&amp;)}]?</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#functionName</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?!\G)(?!})</string>
									<key>end</key>
									<string>(?=\S)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>{</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>punctuation.section.braces.begin.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=})</string>
											<key>endCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>punctuation.section.braces.end.powershell</string>
												</dict>
											</dict>
											<key>contentName</key>
											<string>meta.function-body.powershell</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>$self</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#declarationParameterSet</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>do,for,foreach,switch,while: allow a `:label` that must start the statement; A `:label` before a loop looks just like a function, and its possible to put the loop keyword on a later line!  Here we just see if a valid label appears to be the only useful thing on a single line</string>
					<key>match</key>
					<string>(?&gt;(:)([\p{L}_]\w*)(?=[\s{(,;&amp;|)}]))(?=(?&gt;(?:`\s|\s*&lt;#.*?#&gt;)*)\s*(?:(?i:do|for(?:each)?|switch|while)(?=[\s{(,;&amp;|)}])|#|&lt;#.*$|`?$))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.label.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.label.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#commentBlock</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>break,continue: permit a label following, then revert back to statement mode</string>
					<key>begin</key>
					<string>(?i:break|continue)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.$0.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>[\p{L}_]\w*|(?=$\n|\S)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.name.label.powershell</string>
						</dict>
					</dict>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#commentBlock</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:exit|return|throw)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.$0.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#command_mode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:foreach)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.foreach.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=\()</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\(</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.group.begin.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.foreach-set.powershell</string>
									<key>end</key>
									<string>\)</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.group.end.powershell</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>(?i:in)</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>keyword.control.foreach-in.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=[;)])</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#command_mode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#variableNoProperty</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#type</string>
										</dict>
										<dict>
											<key>comment</key>
											<string>`;` not permitted here</string>
											<key>match</key>
											<string>;</string>
											<key>name</key>
											<string>invalid.terminator.statement.powershell</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=\))(?![,)}])</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#advanceToToken</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?={)</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>\G\{</string>
													<key>beginCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>punctuation.section.braces.begin.powershell</string>
														</dict>
													</dict>
													<key>end</key>
													<string>}</string>
													<key>endCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>punctuation.section.braces.end.powershell</string>
														</dict>
													</dict>
													<key>name</key>
													<string>meta.statements.foreach-loop.powershell</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>$self</string>
														</dict>
													</array>
												</dict>
												<dict>
													<key>comment</key>
													<string>next statement, return when safe to exit</string>
													<key>begin</key>
													<string>(?&lt;=})(?![,)}\]])</string>
													<key>end</key>
													<string>(?&lt;![})])(?=[\n,})\]])</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>$self</string>
														</dict>
													</array>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>only allow foreach arguments before the `(`</string>
							<key>begin</key>
							<string>\G(?=[\s#\x{2013}-\x{2015}-]|&lt;#)</string>
							<key>end</key>
							<string>(?![\s#\x{2013}-\x{2015}-]|&lt;#)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>-parallel parameter can only be used in a workflow, consider using meta scopes, and an injection to properly catch this</string>
									<key>match</key>
									<string>(?i:([\x{2013}-\x{2015}-])parallel)(?:(:)|(?=[\s\[{(,;&amp;|)}]))</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.name.parameter.foreach-parallel.powershell</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.parameter.powershell</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.parameter-value.powershell</string>
										</dict>
									</dict>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>`,`, `&lt;` and `&gt;` not permitted here</string>
							<key>match</key>
							<string>[,&lt;&gt;]</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:while)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.while.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;![)}])(?=\()</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\(</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.group.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>\)</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.group.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.while-condition.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>comment</key>
											<string>`;` not permitted here</string>
											<key>match</key>
											<string>;</string>
											<key>name</key>
											<string>invalid.source.powershell</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#command_mode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=\))(?=[\s#]|&lt;#|`\s|{)</string>
									<key>end</key>
									<string>(?&lt;=})|$(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#advanceToToken</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?&lt;!})(?={)</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>\G\{</string>
													<key>beginCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>punctuation.section.braces.begin.powershell</string>
														</dict>
													</dict>
													<key>end</key>
													<string>}</string>
													<key>endCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>punctuation.section.braces.end.powershell</string>
														</dict>
													</dict>
													<key>name</key>
													<string>meta.statements.while-loop.powershell</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>$self</string>
														</dict>
													</array>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:for)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.for.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;![})])(?=\()</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\(</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.group.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>\)</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.group.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.for-condition.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>comment</key>
											<string>`;` here resumes in command mode</string>
											<key>match</key>
											<string>;</string>
											<key>name</key>
											<string>punctuation.terminator.statement.powershell</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#command_mode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=\))(?![,)}])</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#advanceToToken</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?&lt;!})(?={)</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>\G\{</string>
													<key>beginCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>punctuation.section.braces.begin.powershell</string>
														</dict>
													</dict>
													<key>end</key>
													<string>}</string>
													<key>endCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>punctuation.section.braces.end.powershell</string>
														</dict>
													</dict>
													<key>name</key>
													<string>meta.statements.for-loop.powershell</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>$self</string>
														</dict>
													</array>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>until/while (condition) ends do {statements}</string>
					<key>begin</key>
					<string>(?i:do)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.do.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))|$(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?={)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\{</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statements.do-loop.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=})(?![,;&amp;|)}])</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?&lt;=\))|$(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#advanceToToken</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?i:while)(?=[\s{(,;&amp;|)}])</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>keyword.control.do-while.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?&lt;=\))|$(?!\G)</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
												<dict>
													<key>begin</key>
													<string>(?&lt;!\))(?=\()</string>
													<key>end</key>
													<string>(?=.|$)</string>
													<key>applyEndPatternLast</key>
													<true/>
													<key>patterns</key>
													<array>
														<dict>
															<key>begin</key>
															<string>\G\(</string>
															<key>beginCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.section.group.begin.powershell</string>
																</dict>
															</dict>
															<key>end</key>
															<string>\)</string>
															<key>endCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.section.group.end.powershell</string>
																</dict>
															</dict>
															<key>name</key>
															<string>meta.while-condition.powershell</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>comment</key>
																	<string>`;` not permitted here</string>
																	<key>match</key>
																	<string>;</string>
																	<key>name</key>
																	<string>invalid.source.powershell</string>
																</dict>
																<dict>
																	<key>include</key>
																	<string>#command_mode</string>
																</dict>
															</array>
														</dict>
													</array>
												</dict>
												<dict>
													<key>include</key>
													<string>#notCode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?i:until)(?=[\s{(,;&amp;|)}])</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>keyword.control.do-until.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?&lt;=\))|$(?!\G)</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
												<dict>
													<key>begin</key>
													<string>(?&lt;!\))(?=\()</string>
													<key>end</key>
													<string>(?=.|$)</string>
													<key>applyEndPatternLast</key>
													<true/>
													<key>patterns</key>
													<array>
														<dict>
															<key>begin</key>
															<string>\G\(</string>
															<key>beginCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.section.group.begin.powershell</string>
																</dict>
															</dict>
															<key>end</key>
															<string>\)</string>
															<key>endCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.section.group.end.powershell</string>
																</dict>
															</dict>
															<key>name</key>
															<string>meta.until-condition.powershell</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>comment</key>
																	<string>`;` not permitted here</string>
																	<key>match</key>
																	<string>;</string>
																	<key>name</key>
																	<string>invalid.source.powershell</string>
																</dict>
																<dict>
																	<key>include</key>
																	<string>#command_mode</string>
																</dict>
															</array>
														</dict>
													</array>
												</dict>
												<dict>
													<key>include</key>
													<string>#notCode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>else,elseif: only after if,elseif</string>
					<key>begin</key>
					<string>(?i)(?=if[\s{(,;&amp;|)}])</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#ifStatement</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?i:else)(?=[\s{(,;&amp;|)}])</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>keyword.control.if-else.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#advanceToToken</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;!}){</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statements.if-else-condition.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=})(?![;)}\]\n])</string>
									<key>end</key>
									<string>(?=[;)}\]\n])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:switch)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.switch.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=\()</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\(</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.group.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>\G</string>
											<key>contentName</key>
											<string>meta.switch-value.powershell</string>
											<key>end</key>
											<string>\)</string>
											<key>endCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>punctuation.section.group.end.powershell</string>
												</dict>
											</dict>
											<key>patterns</key>
											<array>
												<dict>
													<key>comment</key>
													<string>`;` not permitted here</string>
													<key>match</key>
													<string>;</string>
													<key>name</key>
													<string>invalid.source.powershell</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#command_mode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?&lt;=\))(?![,)}])</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#switchConditions</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#notCode</string>
												</dict>
												<dict>
													<key>comment</key>
													<string>very limited what is permitted here</string>
													<key>ignore</key>
													<string>[^\s{]</string>
													<key>name</key>
													<string>invalid.source.powershell</string>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#switchConditions</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>only allow switch arguments before the `(` or `{`</string>
							<key>begin</key>
							<string>\G(?=[\s#\x{2013}-\x{2015}-]|&lt;#)</string>
							<key>end</key>
							<string>(?![\s#\x{2013}-\x{2015}-]|&lt;#)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>((?i:([\x{2013}-\x{2015}-])(regex|wildcard|exact|casesensitive)))(?:(:)|(?=[\s\[{(,;&amp;|)}]))</string>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.name.parameter.switch-$2.powershell</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.parameter.powershell</string>
										</dict>
										<key>4</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.parameter-value.powershell</string>
										</dict>
									</dict>
								</dict>
								<dict>
									<key>comment</key>
									<string>-file is special case, needs file argument, no condition expression</string>
									<key>begin</key>
									<string>((?i:([\x{2013}-\x{2015}-])file))(?:(:)|(?=[\s\[{(,;&amp;|)}]))</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.name.parameter.switch-file.powershell</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.parameter.powershell</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.parameter-value.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>\G(?![,;&amp;|)}&lt;&gt;])</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
												<dict>
													<key>begin</key>
													<string>(?&lt;=[\s&gt;]|\G|^)(?![\s#,;&amp;|)}&lt;&gt;]|&lt;#|$)</string>
													<key>end</key>
													<string>(?!\G)</string>
													<key>name</key>
													<string>meta.argument.switch-file.powershell</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>#argument</string>
														</dict>
													</array>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>`,`, `&lt;` and `&gt;` not permitted here</string>
							<key>match</key>
							<string>[,&lt;&gt;]</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:trap)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.trap.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\S|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>only one [exception] argument before the `{`</string>
							<key>begin</key>
							<string>\G(?=[\s#\[]|&lt;#)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#advanceToToken</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=\[)</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>(?&lt;=])(?![,)}])</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
												<dict>
													<key>begin</key>
													<string>(?={)</string>
													<key>end</key>
													<string>(?=.|$)</string>
													<key>applyEndPatternLast</key>
													<true/>
													<key>patterns</key>
													<array>
														<dict>
															<key>begin</key>
															<string>\G\{</string>
															<key>beginCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.section.braces.begin.powershell</string>
																</dict>
															</dict>
															<key>end</key>
															<string>}</string>
															<key>endCaptures</key>
															<dict>
																<key>0</key>
																<dict>
																	<key>name</key>
																	<string>punctuation.section.braces.end.powershell</string>
																</dict>
															</dict>
															<key>name</key>
															<string>meta.statements.trap.powershell</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>include</key>
																	<string>$self</string>
																</dict>
															</array>
														</dict>
														<dict>
															<key>comment</key>
															<string>next statement, return when safe to exit</string>
															<key>begin</key>
															<string>(?&lt;=})(?![,)}\]])</string>
															<key>end</key>
															<string>(?&lt;![}\]])(?=[\n,})\]])</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>include</key>
																	<string>$self</string>
																</dict>
															</array>
														</dict>
													</array>
												</dict>
												<dict>
													<key>comment</key>
													<string>`,`, `&lt;` and `&gt;` not permitted here</string>
													<key>match</key>
													<string>[,\(\[\]&lt;&gt;]</string>
													<key>name</key>
													<string>invalid.source.powershell</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#type</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>ignore</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?={)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\{</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statements.trap.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>next statement, return when safe to exit</string>
									<key>begin</key>
									<string>(?&lt;=})(?![,)}\]])</string>
									<key>end</key>
									<string>(?&lt;![}\]])(?=[\n,})\]])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>`,`, `&lt;` and `&gt;` not permitted here</string>
							<key>match</key>
							<string>[,\(\[\]&lt;&gt;]</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>catch/finally only after try</string>
					<key>begin</key>
					<string>(?i:try)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.try.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?={)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\{</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statements.try.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=})(?![,;&amp;|)}])</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#catchClause</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>data: parameter `-supportedCommand` is array of cmdlets (function names)</string>
					<key>begin</key>
					<string>(?i:data)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.$0.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>only allow data parameters before the `{`</string>
							<key>begin</key>
							<string>\G(?=[\s#\x{2013}-\x{2015}-]|&lt;#)</string>
							<key>end</key>
							<string>(?![\s#\x{2013}-\x{2015}-]|&lt;#)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>-supportedcommand is special case, array of arguments</string>
									<key>begin</key>
									<string>((?i:([\x{2013}-\x{2015}-])supportedcommand))(?:(:)|(?=[\s\[{(,;&amp;|)}]))</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>entity.name.parameter.data-supportedcommand.powershell</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.parameter.powershell</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.parameter-value.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>,</string>
											<key>name</key>
											<string>punctuation.separator.powershell</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?:\G|(?&lt;=,))(?![;&amp;|)}&lt;&gt;])</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
												<dict>
													<key>begin</key>
													<string>(?&lt;=[\s&gt;]|\G|^)(?![\s#,;&amp;|)}&lt;&gt;]|&lt;#|$)</string>
													<key>end</key>
													<string>(?!\G)</string>
													<key>name</key>
													<string>meta.argument.data-supportedcommand.powershell</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>#argument</string>
														</dict>
													</array>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?={)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\{</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statements.data-section.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>next statement, return when safe to exit</string>
									<key>begin</key>
									<string>(?&lt;=})(?![,)}\]])</string>
									<key>end</key>
									<string>(?&lt;!})(?=[\n,})\]])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>very limited what is permitted here</string>
									<key>ignore</key>
									<string>[^\s{}]</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>`,`, `&lt;` and `&gt;` not permitted here</string>
							<key>match</key>
							<string>[,\[\]&lt;&gt;]</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>inlinescript,parallel,sequence: only in workflow; </string>
					<key>begin</key>
					<string>(?i:begin|dispose|dynamicparam|end|inlinescript|parallel|process|sequence)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.$0.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?={)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\{</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statement-block.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>next statement, return when safe to exit</string>
									<key>begin</key>
									<string>(?&lt;=})(?![,)}\]])</string>
									<key>end</key>
									<string>(?&lt;!})(?=[\n,})\]])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>very limited what is permitted here</string>
									<key>ignore</key>
									<string>[^\s{}]</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>`,`, `&lt;` and `&gt;` not permitted here</string>
							<key>match</key>
							<string>[,\[\]&lt;&gt;]</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>the argument is permitted to be quoted; TODO</string>
					<key>match</key>
					<string>(?i:(using))\s+(?i:(assembly|namespace|module))\s+((?&gt;[\p{L}_][\w#]*(?:\.#*)?)+(?=[&lt;&gt;.,+\s\[\]]))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.using.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#type_Disolve</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>from,var,define are reserved; configuration is TODO, needs significant syntax structure work.</string>
					<key>match</key>
					<string>(?i:configuration|define|from|var)(?=[\s{(,;&amp;|)}])</string>
					<key>name</key>
					<string>invalid.reserved.keyword.control.$0.powershell</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>param: only in main body or a function main body, and only if followed by parameter declaration</string>
					<key>match</key>
					<string>(?i:param)(?=[\s{(,;&amp;|)}])</string>
					<key>name</key>
					<string>keyword.control.$0.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#command_mode</string>
				</dict>
			</array>
		</dict>
		<key>command_mode</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#terminators</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>(dot) source operator, requires trailing space, or invoke operator</string>
					<key>begin</key>
					<string>&amp;|\.(?=[\s{(,;&amp;|)}'"\x{2018}-\x{201E}$@])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.invoke-or-source.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Next token needs to be an operand for the operator, not the actual command, but an expression or unquoted expandable string that describes the command's name.</string>
							<key>begin</key>
							<string>\G(?![,;&amp;|)}&lt;&gt;])|\G(?=&lt;|[1-6]&gt;&amp;[12]|\*&gt;&amp;1|[1-6*]?&gt;&gt;?)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#advanceToToken</string>
								</dict>
								<dict>
									<key>comment</key>
									<string>at the begining of a command name, `&lt;`, `&gt;` or `&gt;&gt;` are the entire command name.</string>
									<key>match</key>
									<string>(?:&lt;|[1-6]&gt;&amp;[12]|\*&gt;&amp;1|[1-6*]?&gt;&gt;?)</string>
									<key>name</key>
									<string>entity.name.function.powershell</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=[\s&gt;]|\G|^)(?![\s#,;&amp;|)}&lt;&gt;]|&lt;#|$)</string>
									<key>end</key>
									<string>(?!\G)</string>
									<key>name</key>
									<string>meta.argument.invoke-or-source.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#argument</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>Next token needs to be an operand for the operator, not the actual command, but an expression or unquoted expandable string that describes the command's name.</string>
							<key>begin</key>
							<string>(?![\n;)}\]])</string>
							<key>end</key>
							<string>(?=[\n;)}\]])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#argument_mode</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>could be a numeric constant or a limited list of unary operators, that we should switch to expression mode</string>
					<key>begin</key>
					<string>(?=[.,!+\x{2013}-\x{2015}-]|\d(?!&gt;&amp;[12]))</string>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>if unary operators/numeric constant advanced, switch to expression mode</string>
							<key>begin</key>
							<string>(?!\G)(?![\n;)}\]])</string>
							<key>end</key>
							<string>(?=[\n;)}\]])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression_mode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#numericConstant</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#operators_preUnary</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>if neither numeric or a pre-unary operator, try finishing command mode with a command name</string>
							<key>begin</key>
							<string>(?![\n;)}\]])</string>
							<key>end</key>
							<string>(?=[\n;)}\]])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#command_name</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>patterns that indicate an expression, might be able to simplify this to include expression_mode and then see if the cursor advanced, sorta, don't forget about 'notCode', maybe check operand/operator only first, as redirect could also be a problem.</string>
					<key>begin</key>
					<string>(?=[$@][{(\w:$^?]|[({\[,]|@?['"\x{2018}-\x{201E}]|[\x{2013}-\x{2015}-][\s{(,;|)}#&lt;&gt;.!+%*/='"\x{2018}-\x{201E}\x{2013}-\x{2015}-])</string>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression_mode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>`\n</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>`\s</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>invalid.empty-pipe.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#command_name</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>catch that which didn't match elsewhere</string>
					<key>match</key>
					<string>[^\s]</string>
					<key>name</key>
					<string>invalid.source.powershell</string>
				</dict>
			</array>
		</dict>
		<key>command_name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#commentBlock</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentLine</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commands</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>command names are allowed to start with &lt; or &gt;, without a backtick, but `function` requires a backtick.  See below!</string>
					<key>begin</key>
					<string>(?:(global|local|script|private)(`)?(:)(?![\s{(,;&amp;|)}])|(?=[^`'"\x{2018}-\x{201E}\s{(,;&amp;)}@#]|`(?!\s)))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.scope.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.character.escape.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>at the begining of a command name, `]`, `&lt;`, `&gt;` or `&gt;&gt;` are the entire command name.</string>
							<key>match</key>
							<string>\G(?:]|&lt;|\*&gt;&amp;1|\*?&gt;&gt;?|[1-6]&gt;&amp;[12])</string>
							<key>name</key>
							<string>entity.name.function.powershell</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\G(?=[^\n{(,;&amp;|)}])</string>
							<key>end</key>
							<string>(?=[\s{(,;&amp;|)}])</string>
							<key>name</key>
							<string>entity.name.function.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>function names that start with `:` are treated differently</string>
									<key>match</key>
									<string>\G(?&lt;!:):\p{L}\w*[^\s{(,;&amp;|)}]?</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#functionName</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?![\n;)}])</string>
							<key>end</key>
							<string>(?=[\n;)}])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#argument_mode</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>argument</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#scriptblock</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressionGroup</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#hashtable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quotedStrings_Members</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numericConstant_argumentMode</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>could be variable reference, if it doesn't have member reference, its the start of an unquoted expandable string</string>
					<key>begin</key>
					<string>(?=\$[{\w:$^?])</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>check out the first variable reference</string>
							<key>begin</key>
							<string>\G(?=\$)</string>
							<key>end</key>
							<string>(?!\G)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variableNoProperty</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>if a member access doesn't occur after variable, finish as an unquoted expandable string argument.</string>
							<key>begin</key>
							<string>(?![\s{(,;&amp;|)}])(?!\.(?!\.)|::|\[)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#unquotedArgument</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\.(?!\.)|::|\[)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#accessors</string>
								</dict>
								<dict>
									<key>comment</key>
									<string>attempt another argument after member access</string>
									<key>include</key>
									<string>#argument</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#substatement</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>splatting cannot have members and certain characters following, including no line comment</string>
					<key>match</key>
					<string>(?&gt;@(?:[$^?]|(?&gt;[\w][\w?]*:(?!:)|:)?(?:[\w?]|:(?!:))+|:))(?![~`!@#$%^*&lt;&gt;\]\\/'"\x{2018}-\x{201E}+-])</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable_inner</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>splatting cannot have members and certain characters following, including no line comment</string>
					<key>match</key>
					<string>@(?![$^?:\w])</string>
					<key>name</key>
					<string>invalid.splat.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unquotedArgument</string>
				</dict>
			</array>
		</dict>
		<key>argument_mode</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#redirection</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>`,` just continues current mode, after advancing to next token</string>
					<key>begin</key>
					<string>,</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentBlock</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentLine</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\w)(--%)(?!\w)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.verbatim-argument.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$|(?=\|)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>[^"\x{201C}-\x{201E}]+?</string>
							<key>name</key>
							<string>string.unquoted.verbatim-argument.powershell</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?:["\x{201C}-\x{201E}])</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?:["\x{201C}-\x{201E}])|$</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.powershell</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.double.powershell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(([\x{2013}-\x{2015}-])\p{L}[^:\s\[{(,;&amp;|)}'"\x{2018}-\x{201E}]*)(?:(:)|(?=[\s\[{(,;&amp;|)}]))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.parameter.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameter.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameter-value.powershell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#argument</string>
				</dict>
			</array>
		</dict>
		<key>unquotedArgument</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`(?!\n)\s</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.(?=['"\x{2018}-\x{201E}\s{(,;&amp;|)}$])</string>
					<key>name</key>
					<string>string.unquoted.argument.powershell</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?![\s{(,;&amp;|)}])</string>
					<key>alternateBegin</key>
					<string>(?=[^'"\x{2018}-\x{201E}\s\[{(,;&amp;|)}$@])|(?&lt;=\S)(?=[$@&lt;&gt;])</string>
					<key>end</key>
					<string>(?=[\s{(,;&amp;|)}])</string>
					<key>contentName</key>
					<string>string.unquoted.argument.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\G`[\x{2013}-\x{2015}-]</string>
							<key>name</key>
							<string>constant.character.escape.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#unquotedStrings_text</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expression_mode</key>
		<dict>
			<key>comment</key>
			<string>Keep in mind, before begining expression mode, check for prefixed unary operators, but check for numeric constants before that!  This is done for each area that forwards to expression mode.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#redirection</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>normally operands win matches first, but numeric constant and operators share common first characters, and their matching needs to be alternated such that after any operand matches, a check for operators should occur before a numeric value is checked for again.  Operators needs to have first priority of a match after a numeric constant.</string>
					<key>include</key>
					<string>#operand</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Once an operator has matched, subsequently #operators_preunary should be checked first until the next non operator token is found.  However, an operator might have matched before we've even gotten here (pre-unary)</string>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>match</key>
					<string>`\n</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>ignore</key>
					<string>`</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#notCode</string>
				</dict>
			</array>
		</dict>
		<key>operand</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>preunary operators are technically part of an operand expression</string>
					<key>include</key>
					<string>#operators_preUnary</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressionGroup</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#hashtable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#scriptblock</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numericConstant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#substatement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quotedStrings_Members</string>
				</dict>
			</array>
		</dict>
		<key>array</key>
		<dict>
			<key>begin</key>
			<string>(?=@\()</string>
			<key>end</key>
			<string>(?!\G)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(@)(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.array.begin.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.end.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.array-expression.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\.(?!\.)|::|\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>catchClause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#advanceToToken</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:catch)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.try-catch.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?={)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\{</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statements.try-catch.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=})(?![,)}]|$)</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#catchClause</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>very limited what is permitted here</string>
									<key>ignore</key>
									<string>[^\s{}]</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>only [exception] arguments before the `{`</string>
							<key>begin</key>
							<string>\G(?=[\s#\[]|&lt;#)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#advanceToToken</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=\[)</string>
									<key>end</key>
									<string>(?![\s#\[,]|&lt;#)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>,</string>
											<key>name</key>
											<string>punctuation.separator.powershell</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#type</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#notCode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#notCode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>`,`, `&lt;` and `&gt;` not permitted here</string>
							<key>match</key>
							<string>[,&lt;&gt;]</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?i:finally)(?=[\s{(,;&amp;|)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.try-finally.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?={)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\{</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.statements.try-finally.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>next statement, return when safe to exit</string>
									<key>begin</key>
									<string>(?&lt;=})(?![,)}\]])</string>
									<key>end</key>
									<string>(?&lt;![}\]])(?=[\n,})\]])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>$self</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>comment</key>
									<string>very limited what is permitted here</string>
									<key>ignore</key>
									<string>[^\s{}]</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>next statement, return when safe to exit</string>
					<key>begin</key>
					<string>(?![,)}\]]|$)</string>
					<key>end</key>
					<string>(?&lt;![}\]])(?=[\n,})\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>commentBlock</key>
		<dict>
			<key>begin</key>
			<string>&lt;#</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.block.begin.powershell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>#&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.block.end.powershell</string>
				</dict>
			</dict>
			<key>name</key>
			<string>comment.block.powershell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>capture remainder of comment block, preventing #commentEmbeddedDocs from consuming to end of line</string>
					<key>match</key>
					<string>.+?(?=#&gt;)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>restore the anchor point</string>
									<key>begin</key>
									<string>(?=.)</string>
									<key>end</key>
									<string>$</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#commentEmbeddedDocs</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentEmbeddedDocs</string>
				</dict>
			</array>
		</dict>
		<key>commentLine</key>
		<dict>
			<key>begin</key>
			<string>(#)#*</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.powershell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$(?=(\n)?)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>comment.line.powershell</string>
				</dict>
			</dict>
			<key>name</key>
			<string>comment.line.powershell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#commentEmbeddedDocs</string>
				</dict>
			</array>
		</dict>
		<key>argumentModeEscapes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`[`0abefnrtv'"\x{2018}-\x{201E}$@{(,;&amp;|)}#&lt;&gt;\n]</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unicodeEscape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>`</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
			</array>
		</dict>
		<key>commands</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Verb-Noun pattern:</string>
					<key>begin</key>
					<string>(?i:Add|Approve|Assert|Backup|Block|Build|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Deploy|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)-(?:`.|[^\s{(,;&amp;)}])+?(?:\.(?i:exe|cmd|bat|ps1))?(?=[\s{(,;&amp;)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>support.function.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#argument_mode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>Builtin cmdlets with reserved verbs, trailing negative lookahead needs work</string>
					<key>begin</key>
					<string>(?i:(?:foreach|where|sort|tee)-object)(?=[\s{(,;&amp;)}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>support.function.$0.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#argument_mode</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>commentEmbeddedDocs</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.string.documentation.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.documentation.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:^|\G)(?i:\s*(\.)(COMPONENT|DESCRIPTION|EXAMPLE|FUNCTIONALITY|INPUTS|LINK|NOTES|OUTPUTS|ROLE|SYNOPSIS))(?:\s*$)</string>
					<key>name</key>
					<string>comment.documentation.embedded.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.string.documentation.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.documentation.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.character.documentation.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:^|\G)(?i:\s*(\.)(EXTERNALHELP)\s+(.+))</string>
					<key>name</key>
					<string>comment.documentation.embedded.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.string.documentation.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.documentation.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.documentation.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:^|\G)(?i:\s*(\.)(REMOTEHELPRUNSPACE)\s+(.+))</string>
					<key>name</key>
					<string>comment.documentation.embedded.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.string.documentation.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.documentation.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.documentation.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:^|\G)(?i:\s*(\.)(FORWARDHELPCATEGORY)\s+(Alias|Cmdlet|HelpFile|Function|General|Provider|FAQ|Glossary|ScriptCommand|ExternalScript|Filter|All)\s*$)</string>
					<key>name</key>
					<string>comment.documentation.embedded.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.string.documentation.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.documentation.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.documentation.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:^|\G)(?i:\s*(\.)(FORWARDHELPTARGETNAME)\s+(.+))</string>
					<key>name</key>
					<string>comment.documentation.embedded.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.string.documentation.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.documentation.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.parameter.documentation.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:^|\G)(?i:\s*(\.)(PARAMETER)\s+(.+))</string>
					<key>name</key>
					<string>comment.documentation.embedded.powershell</string>
				</dict>
			</array>
		</dict>
		<key>unicodeEscape</key>
		<dict>
			<key>comment</key>
			<string>`u{x} added in PowerShell 6.0 (x=1-6 hex digits, value ranging 0-10FFFF)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`u\{(?:(?:10)\h{1,4}|0?\h{1,5})}</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>`u(?:\{\h{,6}.)?</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
			</array>
		</dict>
		<key>doubleQuotedStringEscapes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`[`0abefnrtv"\x{201C}-\x{201E}$]</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unicodeEscape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>`</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:["\x{201C}-\x{201E}]){2}</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
			</array>
		</dict>
		<key>doubleQuotedHereStringEscapes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`[`0abefnrtv]|^`["\x{201C}-\x{201E}](?=@)</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unicodeEscape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>`</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
			</array>
		</dict>
		<key>declarationParameterSet</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.group.begin.powershell</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameters.powershell</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.group.end.powershell</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>=</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.parameter-default.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[,)])|(?=\n)(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>begin at the first token in the expression, to test for numeric and unary operators</string>
							<key>begin</key>
							<string>(?![\n,;&amp;|)}\]])</string>
							<key>end</key>
							<string>(?=[\n,;&amp;|)}\]])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression_mode</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.comma.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variableNoProperty</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#notCode</string>
				</dict>
			</array>
		</dict>
		<key>expressionGroup</key>
		<dict>
			<key>begin</key>
			<string>(?=\()</string>
			<key>end</key>
			<string>(?=.|$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.begin.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.subexpression.powershell</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.end.powershell</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#command_mode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\.(?!\.)|::|\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>ifStatement</key>
		<dict>
			<key>comment</key>
			<string>else,elseif: only after if,elseif</string>
			<key>begin</key>
			<string>\G(?i:(if)|(elseif))(?=[\s{(,;&amp;|)}])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.if.powershell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.if-elseif.powershell</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=.|$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#advanceToToken</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;![)}])(?=\()</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\G\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.group.begin.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\)</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.group.end.powershell</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.if-condition.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>`;` not permitted here</string>
									<key>match</key>
									<string>;</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#command_mode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\))(?=[\s#]|&lt;#|`\s|{)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#advanceToToken</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;!})(?={)</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>\G\{</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>punctuation.section.braces.begin.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>}</string>
											<key>endCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>punctuation.section.braces.end.powershell</string>
												</dict>
											</dict>
											<key>name</key>
											<string>meta.statements.if-condition.powershell</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>$self</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?&lt;=})(?=[\s#]|&lt;#|`\s)</string>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
												<dict>
													<key>begin</key>
													<string>(?i)(?=elseif[\s{(,;&amp;|)}])</string>
													<key>end</key>
													<string>(?!\G)</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>#ifStatement</string>
														</dict>
													</array>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>substatement</key>
		<dict>
			<key>begin</key>
			<string>(?=\$\()</string>
			<key>end</key>
			<string>(?=.|$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\$)(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.substatement.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.begin.powershell</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.group.substatement-expression.powershell</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.end.powershell</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\.(?!\.)|::|\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>substatementEmbedded</key>
		<dict>
			<key>begin</key>
			<string>(\$)(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.substatement.powershell punctuation.section.embedded.begin.powershell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.group.begin.powershell punctuation.section.embedded.begin.powershell</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.embedded.substatement.powershell interpolated.complex.source.powershell</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.group.end.powershell punctuation.section.embedded.end.powershell</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>numericConstant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&gt;(?i:[+\x{2013}-\x{2015}-]?(?:0(?:x\h+|b[01]+)|(?:\d+(?:\.(?!\.)\d*)?|\.\d+)(?:e[+\x{2013}-\x{2015}-]?\d+)?)(?:u?[lsy]|[dnu])?(?:[kmgtp]b)?))(?=[\s{(,;&amp;|)}#\]&lt;&gt;.!+%*/=\x{2013}-\x{2015}-])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#numericConstant_capture</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#numeric_post</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>capture negative invalid constant construct</string>
					<key>name</key>
					<string>invalid.numeric-constant.powershell</string>
					<key>match</key>
					<string>([\x{2013}-\x{2015}-]\.(?i:(?:e[+\x{2013}-\x{2015}-]?\d+)?(?:[dlsyn]|u[lsy]?)?))((?i:[kmgtp]b))?(?=[\s{(,;&amp;|)}#\]&lt;&gt;.!+%*/=\x{2013}-\x{2015}-])</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>numeric_post</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\G(?=\.(?!\.)|::|\[)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#accessors</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\G(?=[\s.+\x{2013}-\x{2015}-]|&lt;#|`\n)(?![\x{2013}-\x{2015}-]\p{L}|\n)</string>
							<key>end</key>
							<string>\.\.|\+\+?|[\x{2013}-\x{2015}-](?!\p{L})[\x{2013}-\x{2015}-]?|(?=\n)|(?![\s]|&lt;#|`\n|$)</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#operators</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>`\n</string>
									<key>name</key>
									<string>constant.character.escape.powershell</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#commentBlock</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>numericConstant_capture</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.hex.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([+\x{2013}-\x{2015}-]?0(?i:x\h+(u?[lsy]|[nu])?))((?i:[kmgtp]b))?$</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.binary.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.language.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([+\x{2013}-\x{2015}-]?0(?i:b[01]+(u?[lsy]|[dnu])?))((?i:[kmgtp]b))?$</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.decimal.powershell</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>constant.language.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([+\x{2013}-\x{2015}-]?(?i:\d+(?:(?:(d)|(?:(e[+\x{2013}-\x{2015}-]?\d+)\g&lt;2&gt;?))|\.\d*(\g&lt;3&gt;?\g&lt;2&gt;?))|\.\d+\g&lt;4&gt;))((?i:[kmgtp]b))?$</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.integer.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.powershell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.language.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([+\x{2013}-\x{2015}-]?(?:\d+(?i:(?:\.\d*)?((?:e[+\x{2013}-\x{2015}-]?\d+)?(u?[lsy]|[un])))?|(?:\.\d+)\g&lt;2&gt;))((?i:[kmgtp]b))?$</string>
				</dict>
			</array>
		</dict>
		<key>numericConstant_argumentMode</key>
		<dict>
			<key>match</key>
			<string>(?&gt;(?i:(?:0(?:x\h+|b[01]+)|(?:\d+(?:\.(?!\.)\d*)?|\.\d+)(?:e[+\x{2013}-\x{2015}-]?\d+)?)(?:u?[lsy]|[dnu])?(?:[kmgtp]b)?))(?=[\s{(,;&amp;|)}])</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#numericConstant_capture</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>scriptblock</key>
		<dict>
			<key>begin</key>
			<string>(?={)</string>
			<key>end</key>
			<string>(?=.|$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.end.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.scriptblock.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\.(?!\.)|::|\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type</key>
		<dict>
			<key>comment</key>
			<string>This is used by both type and attribute references.</string>
			<key>begin</key>
			<string>(?=\[)</string>
			<key>end</key>
			<string>(?=.|$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.bracket.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>]|(?=\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.bracket.end.powershell</string>
						</dict>
					</dict>
					<key>applyEndPatternLast</key>
					<true/>
					<key>name</key>
					<string>meta.attribute-or-type-reference.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?i)(?:(?:cmdletbinding|alias|flags|outputtype|parameter|validate(?:not(?:null(?:orempty)?)|count|set|script|range|pattern|length)|allow(?:null|empty(?:collection|string))|supportswildcards|dsc(?:resource|property)|psdefaultvalue)(?![.\w+`-]))</string>
							<key>name</key>
							<string>support.function.attribute.powershell</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\()</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G\(</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.group.attribute-argument-set.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>\)</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation..group.attribute-argument-set.end.powershell</string>
										</dict>
									</dict>
									<key>applyEndPatternLast</key>
									<true/>
									<key>name</key>
									<string>meta.attribute-argument-set.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#advanceToToken</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>\b([\p{L}_]\w*)</string>
											<key>beginCaptures</key>
											<dict>
												<key>1</key>
												<dict>
													<key>name</key>
													<string>variable.parameter.attribute.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=[\n,;&amp;|)}\]])</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>=</string>
													<key>beginCaptures</key>
													<dict>
														<key>0</key>
														<dict>
															<key>name</key>
															<string>keyword.operator.assignment.attribute-argument.powershell</string>
														</dict>
													</dict>
													<key>end</key>
													<string>(?=[,;&amp;|)}\]])</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>#advanceToToken</string>
														</dict>
														<dict>
															<key>comment</key>
															<string>begin at the first token in the expression, to test for numeric and unary operators</string>
															<key>begin</key>
															<string>(?!$|[,;|)}\]])</string>
															<key>end</key>
															<string>(?=$|[,;|)}\]])</string>
															<key>patterns</key>
															<array>
																<dict>
																	<key>include</key>
																	<string>#expression_mode</string>
																</dict>
															</array>
														</dict>
														<dict>
															<key>include</key>
															<string>#notCode</string>
														</dict>
													</array>
												</dict>
												<dict>
													<key>include</key>
													<string>#notCode</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>comment</key>
											<string>this makes `=` invalid without an argument name</string>
											<key>match</key>
											<string>=</string>
											<key>name</key>
											<string>invalid.source.powershell</string>
										</dict>
										<dict>
											<key>comment</key>
											<string>`,` just continues current mode, after advancing to next token</string>
											<key>begin</key>
											<string>,</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>keyword.operator.attribute-argument-separator.comma.powershell</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=.|$)</string>
											<key>applyEndPatternLast</key>
											<true/>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#advanceToToken</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>comment</key>
											<string>this gets expressions without argument names</string>
											<key>include</key>
											<string>#expression_mode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=\))(?![;&amp;|)}\]])</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#advanceToToken</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_SubType</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>index access is not permitted here</string>
					<key>begin</key>
					<string>(?=\.(?!\.)|::)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.bracket.end.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?!\G)(?![\n;)}\]])</string>
							<key>end</key>
							<string>(?=[\n;)}\]])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression_mode</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type_Disolve</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_keywords</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[^\.+]+</string>
					<key>name</key>
					<string>storage.type.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>punctuation.accessor.type.powershell.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+</string>
					<key>name</key>
					<string>keyword.operator.type.powershell</string>
				</dict>
			</array>
		</dict>
		<key>type_SubType</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.bracket.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(])|[^\s\p{L},]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.bracket.end.powershell</string>
						</dict>
					</dict>
					<key>applyEndPatternLast</key>
					<true/>
					<key>name</key>
					<string>meta.type-reference.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type_SubType</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.comma.powershell</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[^\s\[\]+,]+</string>
							<key>name</key>
							<string>invalid.character.powershell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?!`)((?&gt;[\p{L}_`][\w#`+]*)(?=[&lt;&gt;.,+\s(\[\]])(?:\.#*\g&lt;1&gt;?)?)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#type_Disolve</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[^\s]|\n)|(?&lt;=])</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>((?i:Version|Culture|PublicKeyToken))(=)([^,\[\]]*)</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.attribute.powershell</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.powershell</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>constant.character.powershell</string>
								</dict>
							</dict>
							<key>name</key>
							<string>invalid.character.powershell</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type_SubType</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.comma.powershell</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;!])[^\s\[\]\(+,]+</string>
							<key>name</key>
							<string>invalid.character.powershell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentBlock</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentLine</string>
				</dict>
			</array>
		</dict>
		<key>type_keywords</key>
		<dict>
			<key>comment</key>
			<string>primitive types and base classes often used</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment:</key>
					<string>[short], [ushort], [uint], [ulong] added PowerShell Core 6.2;</string>
					<key>match</key>
					<string>(?&lt;![.\w-])(?i:(?:value)?type|void|switch|(?:ps(?:custom)?)?object|pscredential|psmoduleinfo|hashtable|scriptblock|string|single|float|double|decimal|s?byte|bool(?:ean)?|char|datetime|array|bigint|u?int(?:32|16|64)?|u?long|u?short)(?![.\w#+`-])</string>
					<key>name</key>
					<string>keyword.type.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![.\w-])(?i:system|math|text|convert|regex|xml|enum)(?![\w#-])</string>
					<key>name</key>
					<string>support.class.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![.\w-])(?i:ordered)(?![.\w#+`\[-])</string>
					<key>name</key>
					<string>support.function.attribute.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![.\w-])(?i:ref)(?![.\w#+`\[-])</string>
					<key>name</key>
					<string>storage.modifier.powershell</string>
				</dict>
			</array>
		</dict>
		<key>advanceToArgument</key>
		<dict>
			<key>comment</key>
			<string>consume spaces and comments (but not unescaped line ends) until the next token appears</string>
			<key>begin</key>
			<string>\G(?=[\s]|&lt;#|`\s)</string>
			<key>end</key>
			<string>(?!\s)(?!$)|(?=\n)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`\n</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>useless escape, and doesn't count as a token</string>
					<key>match</key>
					<string>`\s</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentBlock</string>
				</dict>
			</array>
		</dict>
		<key>advanceToToken</key>
		<dict>
			<key>comment</key>
			<string>consume spaces and comments and line ends until the next token appears</string>
			<key>begin</key>
			<string>\G(?=[\s#]|&lt;#|`\s)</string>
			<key>end</key>
			<string>(?!\s)(?!$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>useless escape, and doesn't count as a token</string>
					<key>match</key>
					<string>`\s</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentLine</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentBlock</string>
				</dict>
			</array>
		</dict>
		<key>accessors</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?:\.(?!\.)|(?&lt;!:)::)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#members</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#commentLine</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#commentBlock</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G(?=\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\[</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.bracket.begin.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>]</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.bracket.end.powershell</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.index.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>should only be an expression, no assignment operators</string>
									<key>include</key>
									<string>#expression_mode</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\.(?!\.)|::|\[)</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#accessors</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentLine</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentBlock</string>
				</dict>
			</array>
		</dict>
		<key>members</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;![\])])(?:(?i:(foreach|where)(?=[\({]))|([\p{L}_]\w*(?=\()))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.$1.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.method.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)|(?=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\G(?=\()</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\(</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.method-arguments.begin.powershell</string>
										</dict>
									</dict>
									<key>contentName</key>
									<string>meta.method-arguments.powershell</string>
									<key>end</key>
									<string>\)</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.method-arguments.end.powershell</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#expression_mode</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=\.(?!\.)|::|\[)</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#accessors</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\G(?=\{)</string>
							<key>end</key>
							<string>(?!\G)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#scriptblock</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;![\])])[\p{L}_]\w*(?=\.(?!\.)|::|\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.property.powershell</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\])])[\p{L}_]\w*</string>
					<key>name</key>
					<string>variable.other.property.powershell</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>need to wrap a begin block around this using \G</string>
					<key>include</key>
					<string>#quotedStrings_Members</string>
				</dict>
			</array>
		</dict>
		<key>switchConditions</key>
		<dict>
			<key>begin</key>
			<string>(?={)</string>
			<key>end</key>
			<string>(?=.|$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.end.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.switch-conditions.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?:\G|(?&lt;=\}))(?![,;&amp;|)}])</string>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#advanceToToken</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?&lt;=[\s&gt;]|\G|^)(?![\s#,;&amp;|)}&lt;&gt;]|&lt;#)</string>
									<key>end</key>
									<string>(?!\G)</string>
									<key>name</key>
									<string>meta.argument.switch-condition.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>comment</key>
											<string>default: only in switch</string>
											<key>match</key>
											<string>(?i:default)(?=[\s{(,;&amp;|)}])</string>
											<key>name</key>
											<string>keyword.control.switch-default.powershell</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#argument</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.braces.begin.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.braces.end.powershell</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.statements.switch-condition.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>very limited what is permitted here</string>
							<key>match</key>
							<string>[^\s{()}]</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>next statement, return when safe to exit</string>
					<key>begin</key>
					<string>(?&lt;=})(?![,)}\]])</string>
					<key>end</key>
					<string>(?&lt;!})(?=[\n,})\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable_inner</key>
		<dict>
			<key>comment</key>
			<string>separate the parts of the variable name and scope them, character validation has already been done</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?:\G|[$@])(?:[^`:]|`[^:])*`?:$</string>
					<key>name</key>
					<string>invalid.variable.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.scope.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.character.escape.powershell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>These are special constants.</string>
					<key>match</key>
					<string>(?:\G|([$@]))(?i:(?:(global|local|private|script|using|workflow)?(`)?(:))?(?:False|Null|True))$</string>
					<key>name</key>
					<string>constant.language.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.scope.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.character.escape.powershell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>These are the other built-in constants.</string>
					<key>match</key>
					<string>(?:\G|([$@]))(?i:(?:(global|local|private|script|using|workflow)?(`)?(:))?(?:Error|ExecutionContext|Is(?:CoreCLR|Linux|MacOS|Windows)|Host|Home|PID|PSHome|PSVersionTable|ShellID)$)</string>
					<key>name</key>
					<string>variable.language.builtin.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.scope.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.character.escape.powershell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:\G|([$@]))(?i:(?:(global|local|private|script|using|workflow)?(`)?(:))?(?:[$^?_]|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PSCmdlet|PSCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PSUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This)$)</string>
					<key>name</key>
					<string>variable.language.builtin.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.scope.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>invalid.character.escape.powershell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Style preference variables as language variables so that they stand out.</string>
					<key>match</key>
					<string>(?:\G|([$@]))(?i:(?:(global|local|private|script|using|workflow)?(`)?(:))?(?:ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|InformationPreference|Log(?:Command|Engine|Provider)(?:HealthEvent|LifecycleEvent)|Maximum(?:AliasCount|DriveCount|ErrorCount|FunctionCount|HistoryCount|VariableCount)|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoLoadingPreference|PSSenderInfo|PSSession(?:ApplicationName|ConfigurationName|Option)|VerbosePreference|WarningPreference|WhatIfPreference)$)</string>
					<key>name</key>
					<string>variable.language.powershell</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable_scopeOrDrive</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable_escapes</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>comment</key>
					<string>capture all other seemingly valid normal variables</string>
					<key>match</key>
					<string>(?:\G|([$@]))(?:([^:]*`?:))?(.*)</string>
					<key>name</key>
					<string>variable.other.readwrite.powershell</string>
				</dict>
			</array>
		</dict>
		<key>variable_scopeOrDrive</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>workflow scope only available in workflow</string>
					<key>match</key>
					<string>((?i:global|local|private|script|using|workflow))(`)?(:)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.scope.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.character.escape.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i:(Alias|Cert|Env|Function|HKCU|HKLM|Variable|WSMan))(`)?(:)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.type.drive.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.character.escape.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Unknown drive</string>
					<key>begin</key>
					<string>(?=.)</string>
					<key>end</key>
					<string>:</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.colon.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>storage.type.drive.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable_escapes</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable_bracketed_inside</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>capture a complete variable reference that appears on a single line and attempt to scope language variables</string>
					<key>match</key>
					<string>\G(?:[^`}:]*`?:)?[^`}]*(?=})</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?=.)</string>
									<key>end</key>
									<string>(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#variable_inner</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>this captures up to the first colon, and then matches up the capture</string>
					<key>match</key>
					<string>\G(?:[^`}:]|`[^:])*`?:</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable_scopeOrDrive</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable_escapes</string>
				</dict>
			</array>
		</dict>
		<key>variable_escapes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`(?:[`0abefnrtv{}\n])</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unicodeEscape</string>
				</dict>
				<dict>
					<key>match</key>
					<string>`</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>{</string>
					<key>name</key>
					<string>invalid.character.powershell</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=\$[{\w:$^?])</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\G\$(?:[$^?]|(?&gt;[\w][\w?]*:(?!:)|:)?(?:[\w?]|:(?!:))+)(?=\.(?!\.)|::|\[)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#variable_inner</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=.|$)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#accessors</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>\G\$(?:[$^?]|(?&gt;[\w][\w?]*:(?!:)|:)?(?:[\w?]|:(?!:))+|:)</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#variable_inner</string>
										</dict>
									</array>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>match</key>
							<string>\$\{}</string>
							<key>name</key>
							<string>invalid.variable.powershell</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\$\{)</string>
							<key>end</key>
							<string>(?!\G)</string>
							<key>applyEndPatternLast</key>
							<true/>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(\$)(\{)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.variable.powershell</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.variable.braces.begin.powershell</string>
										</dict>
									</dict>
									<key>end</key>
									<string>}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.variable.braces.end.powershell</string>
										</dict>
									</dict>
									<key>name</key>
									<string>variable.other.readwrite.powershell</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#variable_bracketed_inside</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=\.(?!\.)|::|\[)</string>
									<key>end</key>
									<string>(?=.|$)</string>
									<key>applyEndPatternLast</key>
									<true/>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#accessors</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>splatting cannot be used outside of argument mode, result is invalid source.</string>
					<key>match</key>
					<string>(?&gt;@(?:[$^?]|(?&gt;[\w][\w?]*:(?!:)|:)?(?:[\w?]|:(?!:))+|:))</string>
					<key>name</key>
					<string>invalid.splat.powershell</string>
				</dict>
			</array>
		</dict>
		<key>variableNoProperty</key>
		<dict>
			<key>begin</key>
			<string>(?=\$[{\w:$^?])</string>
			<key>end</key>
			<string>(?!\G)</string>
			<key>name</key>
			<string>meta.embedded.interpolated.powershell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\G\$(?:[$^?]|(?&gt;[\w][\w?]*:(?!:)|:)?(?:[\w?]|:(?!:))+|:)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable_inner</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\$\{)</string>
					<key>end</key>
					<string>(?!\G)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(\$)(\{)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.variable.powershell</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.variable.braces.begin.powershell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.variable.braces.end.powershell</string>
								</dict>
							</dict>
							<key>name</key>
							<string>variable.other.readwrite.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable_bracketed_inside</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>RequiresDirective</key>
		<dict>
			<key>comment</key>
			<string>requires directive must be on single line, so capture and tokenize, current PS &lt;= 6.2 allow `requires` keyword without delimiter, but the parameters must follow with a delimiter!</string>
			<key>match</key>
			<string>^\s*(#)((?i:requires))(.?)(.*)$</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.powershell</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.requires.powershell</string>
				</dict>
				<key>3</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\S</string>
							<key>name</key>
							<string>invalid.source.powershell</string>
						</dict>
					</array>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(([\x{2013}-\x{2015}-])(?i:Modules|PSSnapin|PSEdition|RunAsAdministrator|ShellId|Version)\b)(:)?</string>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.parameter.powershell</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameter.powershell</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.parameter-value.powershell</string>
								</dict>
							</dict>
						</dict>
						<dict>
							<key>comment</key>
							<string>needs custom argument handler, single line quoted or unquoted arguments</string>
							<key>match</key>
							<string>(?&lt;!\x{2013}-\x{2015}-)\b\p{L}+|\d+(?:\.\d+)*</string>
							<key>name</key>
							<string>variable.parameter.powershell</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.powershell</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>needs custom hashtable that does not auto continue to next line</string>
							<key>include</key>
							<string>#hashtable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#notCode</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>name</key>
			<string>comment.line.powershell meta.requires.powershell</string>
		</dict>
		<key>hashtable</key>
		<dict>
			<key>begin</key>
			<string>(?=@\{)</string>
			<key>end</key>
			<string>(?=.|$)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(@)(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.hashtable.begin.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.end.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.hashtable.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#hashtableAssignment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\.(?!\.)|::|\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>hashtableAssignment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b([\p{L}_]\w*)(?=\s*=)</string>
					<key>name</key>
					<string>entity.name.variable.property.powershell</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>#quotedStrings_Members</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operand</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.hashtable-member.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[;}])|$(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?![;}\n])</string>
							<key>end</key>
							<string>(?=[;}\n])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G</string>
									<key>end</key>
									<string>(?!\G)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#statements</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#hashtableAssignment</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>;</string>
					<key>name</key>
					<string>punctuation.terminator.assignment.hashtable-member.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#notCode</string>
				</dict>
			</array>
		</dict>
		<key>quotedStrings_Members</key>
		<dict>
			<key>comment</key>
			<string>detect all quoted strings (arguments or expressions) starting here</string>
			<key>begin</key>
			<string>(?=@?['"\x{2018}-\x{201E}])</string>
			<key>end</key>
			<string>(?!\G)</string>
			<key>applyEndPatternLast</key>
			<true/>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>single quoted strings</string>
					<key>begin</key>
					<string>\G['\x{2018}-\x{201B}]</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>['\x{2018}-\x{201B}]</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>['\x{2018}-\x{201B}]{2}</string>
							<key>name</key>
							<string>constant.character.escape.powershell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>double quoted here-strings</string>
					<key>begin</key>
					<string>\G@["\x{201C}-\x{201E}]</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.heredoc.powershell punctuation.definition.heredoc.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^(["\x{201C}-\x{201E}]@)|\G((?:\s*\S+)+)(?:(?!\n)\s)*$</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.heredoc.powershell punctuation.definition.heredoc.end.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\S+</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.quoted.double.heredoc.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variableNoProperty</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#doubleQuotedHereStringEscapes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#substatementEmbedded</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>single quoted here-strings</string>
					<key>begin</key>
					<string>\G@['\x{2018}-\x{201B}]</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.heredoc.powershell punctuation.definition.heredoc.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^(['\x{2018}-\x{201B}]@)|\G((?:\s*\S+)+)(?:(?!\n)\s)*$</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.heredoc.powershell punctuation.definition.heredoc.end.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\S+</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.quoted.single.heredoc.powershell</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>double quoted strings</string>
					<key>begin</key>
					<string>\G(?:["\x{201C}-\x{201E}])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?:["\x{201C}-\x{201E}])</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.powershell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variableNoProperty</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#doubleQuotedStringEscapes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#substatementEmbedded</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\.(?!\.)|::|\[)</string>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#accessors</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>functionName</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`(?!\n)\s</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#argumentModeEscapes</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>['\x{2018}-\x{201B}]</string>
					<key>end</key>
					<string>['\x{2018}-\x{201B}]</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>['\x{2018}-\x{201B}]{2}</string>
							<key>name</key>
							<string>constant.character.escape.powershell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>["\x{201C}-\x{201E}]</string>
					<key>end</key>
					<string>["\x{201C}-\x{201E}]</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#doubleQuotedStringEscapes</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\$\(</string>
							<key>end</key>
							<string>\)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#functionName</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\$\(</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#functionName</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\$\{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\$</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#functionName</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>unquotedStrings_text</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`(?!\n)\s</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#argumentModeEscapes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variableNoProperty</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quotedStrings_Members</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#substatementEmbedded</string>
				</dict>
			</array>
		</dict>
		<key>unquotedStrings_text_interpolatedString</key>
		<dict>
			<key>comment</key>
			<string>!!!!!!!!!!!!!!!!!!WIP!!!</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`(?!\n)\s</string>
					<key>name</key>
					<string>constant.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#argumentModeEscapes</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>['\x{2018}-\x{201B}]</string>
					<key>end</key>
					<string>['\x{2018}-\x{201B}]</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>['\x{2018}-\x{201B}]{2}</string>
							<key>name</key>
							<string>constant.character.escape.powershell</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>["\x{201C}-\x{201E}]</string>
					<key>end</key>
					<string>["\x{201C}-\x{201E}]</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#doubleQuotedStringEscapes</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\$\(</string>
							<key>end</key>
							<string>\)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#unquotedStrings_text</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\$\(</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#unquotedStrings_text</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>terminators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>`||` and `&amp;&amp;` conditional terminators are reserved.</string>
					<key>match</key>
					<string>\|\||&amp;&amp;</string>
					<key>name</key>
					<string>invalid.reserved.powershell</string>
				</dict>
			</array>
		</dict>
		<key>operators_post</key>
		<dict>
			<key>comment</key>
			<string>expression mode operators that follow operands mutually exclusive of each other.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(\+\+)|([\x{2013}-\x{2015}-]{2})</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.postfix.unary.increment.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.postfix.unary.decrement.powershell</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>the range operator is only available after an operand (but is a binary operator)</string>
					<key>begin</key>
					<string>(?&lt;!^)\s*(\.\.)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.range.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?:[+%*/\x{2013}-\x{2015}-]|\?\?)?=</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\n)(?!\G)|(?=[,;&amp;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>operators_preUnary</key>
		<dict>
			<key>comment</key>
			<string>expression mode unary operators that precede operands.</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>`,` just continues current mode, after advancing to next token</string>
					<key>begin</key>
					<string>,</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.unary.array-element-separator.comma.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\+\+)|([\x{2013}-\x{2015}-]{2})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.prefix.unary.increment.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.prefix.unary.decrement.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[\x{2013}-\x{2015}-]((?i:join|[ic]?(?:split)))(?!\p{L})</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.unary.string-$1.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?:(?=[\x{2013}-\x{2015}-])(?i:(.not)|(.bnot)|(.)(?![\d.]))|(!))(?!\p{L})|(\+)(?![\d.])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.logical.unary.not.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.bitwise.unary.bnot.powershell</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.unary.negate.powershell</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.logical.unary.not.powershell</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.unary.positive.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#operators_post</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>`,` just continues current mode, after advancing to next token</string>
					<key>begin</key>
					<string>,</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.array-element-separator.comma.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[\x{2013}-\x{2015}-])(?i:(.is(?:not)?)|(.as))(?!\p{L})</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.comparison.type.powershell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type-cast.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[\x{2013}-\x{2015}-]((?i:[ic]?(?:eq|ne|[gl][te]|(?:not)?(?:like|match|contains|in))))(?!\p{L})</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.comparison.$1.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[\x{2013}-\x{2015}-]((?i:join|[ic]?(?:split|replace)))(?!\p{L})</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.string-$1.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[\x{2013}-\x{2015}-]((?i:and|or|xor))(?!\p{L})</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.logical.$1.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[\x{2013}-\x{2015}-]((?i:band|bor|bxor|shl|shr))(?!\p{L})</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.bitwise.$1.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[\x{2013}-\x{2015}-](?i:f)(?!\p{L})</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.string-format.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[+%*/]|[\x{2013}-\x{2015}-](?![\p{L}\x{2013}-\x{2015}-])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\?\?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.null-coalesce.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>included last only because preunary also includes the negate `!` and `-b?not` operators, but we didn't want the `-` negate operator replacing `-` subtract.</string>
					<key>old include</key>
					<string>#operators_preUnary</string>
				</dict>
			</array>
		</dict>
		<key>notCode</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>`(?!\n)\s</string>
					<key>name</key>
					<string>invalid.character.escape.powershell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentBlock</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#commentLine</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>when nothing else matches in usual tokenizing, consume it to prevent other patterns from striking in the middle of what might be a command name.</string>
					<key>begin</key>
					<string>(?=[^\[\s{(,;&amp;|)}])</string>
					<key>end</key>
					<string>(?=[\s{(,;&amp;|)}])</string>
					<key>contentName</key>
					<string>invalid.source.powershell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#unquotedStrings_text</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>redirection</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#terminators</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>`&amp;` resume's in statement mode, added PowerShell 6 (previously reserved)</string>
					<key>begin</key>
					<string>&amp;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.job.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[\n;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>`|` resume's in command mode</string>
					<key>begin</key>
					<string>\|(?!\|)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.other.pipe.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\n)(?!\G)|(?=[;&amp;)}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToToken</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#command_mode</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;(?!#)|[1-6]&gt;&amp;2</string>
					<key>name</key>
					<string>invalid.reserved.redirection.powershell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[2-6*]&gt;&amp;1</string>
					<key>name</key>
					<string>keyword.operator.redirection.to-stdout.powershell</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>[1-6*]?&gt;&gt;?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.redirection.powershell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=.|$)</string>
					<key>applyEndPatternLast</key>
					<true/>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#advanceToArgument</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=[\s&gt;]|\G|^)(?![\s#;&amp;|)}]|&lt;#|$|`\s)</string>
							<key>end</key>
							<string>(?!\G)</string>
							<key>name</key>
							<string>meta.argument.redirect-file.powershell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>comment</key>
									<string>`,`, `&lt;` and `&gt;` not permitted here</string>
									<key>match</key>
									<string>[,&lt;&gt;]</string>
									<key>name</key>
									<string>invalid.source.powershell</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#argument</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.powershell</string>
	<key>uuid</key>
	<string>f8f5ffb0-503e-11df-9879-0800200c9a66</string>
</dict>
</plist>
